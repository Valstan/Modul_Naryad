# gui/work_order_form.py
from datetime import datetime
from tkinter import ttk
from typing import List, Dict

import customtkinter as ctk

from db.database import Database
from gui.dialogs import DatePickerDialog, WorkerSelectionDialog, show_error
from utils.validators import validate_order_data


class WorkOrderForm(ctk.CTkFrame):
    """–§–æ—Ä–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Ä—è–¥–æ–≤ —Ä–∞–±–æ—Ç."""

    def __init__(self, parent: ctk.CTkFrame, db: Database) -> None:
        super().__init__(parent)
        self.db = db
        self._current_workers: List[int] = []
        self._current_works: List[Dict] = []
        self._setup_ui()
        self._load_initial_data()

    def _setup_ui(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
        self.pack(expand=True, fill="both", padx=20, pady=20)

        # –ü–æ–ª—è –≤–≤–æ–¥–∞
        self.order_id_label = ctk.CTkLabel(self, text="–ù–∞—Ä—è–¥ ‚Ññ:")
        self.order_id_label.grid(row=0, column=0, sticky="w")
        self.order_id_value = ctk.CTkLabel(self, text="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
        self.order_id_value.grid(row=0, column=1, sticky="w")

        # –î–∞—Ç–∞ –Ω–∞—Ä—è–¥–∞
        self.date_label = ctk.CTkLabel(self, text="–î–∞—Ç–∞:")
        self.date_label.grid(row=1, column=0, sticky="w")
        self.date_entry = ctk.CTkEntry(self)
        self.date_entry.insert(0, datetime.now().strftime("%d.%m.%Y"))
        self.date_entry.grid(row=1, column=1, sticky="ew")
        self.date_picker_btn = ctk.CTkButton(self, text="üìÖ", width=30, command=self._open_date_picker)
        self.date_picker_btn.grid(row=1, column=2, padx=5)

        # –í—ã–±–æ—Ä —Ä–∞–±–æ—á–∏—Ö
        self.workers_btn = ctk.CTkButton(self, text="–í—ã–±—Ä–∞—Ç—å —Ä–∞–±–æ—á–∏—Ö", command=self._select_workers)
        self.workers_btn.grid(row=2, column=0, columnspan=3, pady=10, sticky="ew")

        # –¢–∞–±–ª–∏—Ü–∞ –≤–∏–¥–æ–≤ —Ä–∞–±–æ—Ç
        self.works_table = ttk.Treeview(self, columns=("work_type", "quantity", "amount"), show="headings")
        self.works_table.heading("work_type", text="–í–∏–¥ —Ä–∞–±–æ—Ç—ã")
        self.works_table.heading("quantity", text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
        self.works_table.heading("amount", text="–°—É–º–º–∞")
        self.works_table.grid(row=3, column=0, columnspan=3, sticky="nsew")

        # –ö–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç
        self.add_work_btn = ctk.CTkButton(self, text="+ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É", command=self._add_work)
        self.add_work_btn.grid(row=4, column=0, pady=10)
        self.remove_work_btn = ctk.CTkButton(self, text="- –£–¥–∞–ª–∏—Ç—å —Ä–∞–±–æ—Ç—É", command=self._remove_work)
        self.remove_work_btn.grid(row=4, column=1, pady=10)

        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞
        self.total_label = ctk.CTkLabel(self, text="–ò—Ç–æ–≥–æ:")
        self.total_label.grid(row=5, column=0, sticky="w")
        self.total_value = ctk.CTkLabel(self, text="0.00 ‚ÇΩ")
        self.total_value.grid(row=5, column=1, sticky="w")

        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        self.save_btn = ctk.CTkButton(self, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Ä—è–¥", command=self._save_order)
        self.save_btn.grid(row=6, column=0, columnspan=3, pady=20, sticky="ew")

    def _load_initial_data(self) -> None:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–∏—Ö —Å–ø–∏—Å–∫–æ–≤."""
        self.products = self.db.execute_query("SELECT id, name FROM products")
        self.contracts = self.db.execute_query("SELECT id, contract_code FROM contracts")

    def _open_date_picker(self) -> None:
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã."""
        dialog = DatePickerDialog(self)
        date = dialog.get_date()
        if date:
            self.date_entry.delete(0, "end")
            self.date_entry.insert(0, date.strftime("%d.%m.%Y"))

    def _select_workers(self) -> None:
        """–í—ã–±–æ—Ä —Ä–∞–±–æ—á–∏—Ö –∏–∑ —Å–ø–∏—Å–∫–∞."""
        dialog = WorkerSelectionDialog(self, self.db)
        workers = dialog.get_selected_workers()
        if workers:
            self._current_workers = workers
            self.workers_btn.configure(text=f"–í—ã–±—Ä–∞–Ω–æ: {len(workers)} —Ä–∞–±–æ—á–∏—Ö")

    def _add_work(self) -> None:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∞ —Ä–∞–±–æ—Ç—ã –≤ —Ç–∞–±–ª–∏—Ü—É."""
        # –ó–∞–≥–ª—É—à–∫–∞: –∑–¥–µ—Å—å –±—É–¥–µ—Ç –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ä–∞–±–æ—Ç—ã
        work_type = ("–ú–æ–Ω—Ç–∞–∂ –ø—Ä–æ–≤–æ–¥–∫–∏", 150.0)  # –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
        self._current_works.append({"type_id": 1, "quantity": 5, "price": work_type[1]})
        self._update_works_table()

    def _update_works_table(self) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ä–∞–±–æ—Ç."""
        for row in self.works_table.get_children():
            self.works_table.delete(row)

        total = 0.0
        for work in self._current_works:
            amount = work["quantity"] * work["price"]
            self.works_table.insert("", "end", values=(work["type_id"], work["quantity"], f"{amount:.2f} ‚ÇΩ"))
            total += amount

        self.total_value.configure(text=f"{total:.2f} ‚ÇΩ")

    def _save_order(self) -> None:
        is_valid, error_msg = validate_order_data(
            self.date_entry.get(),
            self._current_workers,
            self._current_works,
            self.db
        )

        if not is_valid:
            show_error(error_msg)
            return

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤—ã—Ö –æ–∫–æ–Ω –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏