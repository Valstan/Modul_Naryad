# gui/work_order_form.py
import logging
from datetime import datetime
from typing import List, Dict, Optional, Tuple

import customtkinter as ctk
from tkinter import ttk

from db.database import Database
from gui.dialogs import DatePickerDialog, WorkerSelectionDialog, show_error, show_info
from utils.validators import validate_date, validate_positive_number

logger = logging.getLogger(__name__)


class WorkOrderForm(ctk.CTkFrame):
    """–§–æ—Ä–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Ä—è–¥–æ–≤ —Ä–∞–±–æ—Ç —Å –ø–æ–ª–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π."""

    def __init__(self, parent: ctk.CTkFrame, db: Database) -> None:
        super().__init__(parent)
        self.db = db
        self._current_workers: List[int] = []
        self._current_works: List[Dict] = []
        self._setup_ui()
        self._load_initial_data()

    def _setup_ui(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∫–æ–º–ø–æ–Ω–æ–≤–∫–æ–π."""
        self.grid_columnconfigure(1, weight=1)
        self.grid_rowconfigure(3, weight=1)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–æ—Ä–º—ã
        ctk.CTkLabel(self, text="–ù–æ–≤—ã–π –Ω–∞—Ä—è–¥ —Ä–∞–±–æ—Ç", font=("Arial", 14, "bold")).grid(
            row=0, column=0, columnspan=3, pady=10, sticky="w"
        )

        # –ü–æ–ª—è –≤–≤–æ–¥–∞
        self._create_input_fields()
        self._create_workers_section()
        self._create_works_table()
        self._create_total_section()
        self._create_control_buttons()

    def _create_input_fields(self) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–µ–π –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Ä—è–¥–∞."""
        # –î–∞—Ç–∞ –Ω–∞—Ä—è–¥–∞
        ctk.CTkLabel(self, text="–î–∞—Ç–∞:").grid(row=1, column=0, sticky="e", padx=5)
        self.date_entry = ctk.CTkEntry(self)
        self.date_entry.insert(0, datetime.now().strftime("%d.%m.%Y"))
        self.date_entry.grid(row=1, column=1, sticky="ew", padx=5)

        ctk.CTkButton(
            self,
            text="üìÖ",
            width=30,
            command=self._open_date_picker
        ).grid(row=1, column=2, padx=5)

        # –í—ã–±–æ—Ä –∏–∑–¥–µ–ª–∏—è –∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
        self._create_combobox("–ò–∑–¥–µ–ª–∏–µ:", "products", row=2)
        self._create_combobox("–ö–æ–Ω—Ç—Ä–∞–∫—Ç:", "contracts", row=3)

    def _create_combobox(self, label: str, table: str, row: int) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –¥–ª—è —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π."""
        ctk.CTkLabel(self, text=label).grid(row=row, column=0, sticky="e", padx=5)
        values = self._get_combobox_values(table)
        combobox = ctk.CTkComboBox(self, values=values)
        combobox.grid(row=row, column=1, sticky="ew", padx=5, pady=2)
        setattr(self, f"{table}_combobox", combobox)

    def _get_combobox_values(self, table: str) -> List[str]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–∏—Ö —Å–ø–∏—Å–∫–æ–≤."""
        try:
            if table == "products":
                result = self.db.execute_query("SELECT id, name FROM products")
            elif table == "contracts":
                result = self.db.execute_query("SELECT id, contract_code FROM contracts")
            return [f"{row[0]} - {row[1]}" for row in result] if result else []
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {table}: {str(e)}")
            return []

    def _load_initial_data(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–∏—Ö —Å–ø–∏—Å–∫–æ–≤."""
        try:
            products = self.db.execute_query("SELECT id, name FROM products")
            contracts = self.db.execute_query("SELECT id, contract_code FROM contracts")

            self.products_combobox.configure(
                values=[f"{p[0]} - {p[1]}" for p in products] if products else []
            )
            self.contracts_combobox.configure(
                values=[f"{c[0]} - {c[1]}" for c in contracts] if contracts else []
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            show_error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤")

    def _create_workers_section(self) -> None:
        """–°–µ–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ —Ä–∞–±–æ—á–∏—Ö –±—Ä–∏–≥–∞–¥—ã."""
        self.workers_btn = ctk.CTkButton(
            self,
            text="–í—ã–±—Ä–∞—Ç—å —Ä–∞–±–æ—á–∏—Ö (0)",
            command=self._select_workers
        )
        self.workers_btn.grid(row=4, column=0, columnspan=3, pady=10, sticky="ew")

    def _create_works_table(self) -> None:
        """–¢–∞–±–ª–∏—Ü–∞ –≤–∏–¥–æ–≤ —Ä–∞–±–æ—Ç —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Å—Ç–∏–ª–µ–º."""
        columns = ("–í–∏–¥ —Ä–∞–±–æ—Ç—ã", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–¶–µ–Ω–∞", "–°—É–º–º–∞")
        self.works_table = ttk.Treeview(
            self,
            columns=columns,
            show="headings",
            style="Custom.Treeview",
            height=6
        )

        for col in columns:
            self.works_table.heading(col, text=col)
            self.works_table.column(col, width=120, anchor="center")

        self.works_table.grid(row=5, column=0, columnspan=3, sticky="nsew", pady=10)

    def _create_total_section(self) -> None:
        """–°–µ–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Ç–æ–≥–æ–≤–æ–π —Å—É–º–º—ã."""
        ctk.CTkLabel(self, text="–ò—Ç–æ–≥–æ:").grid(row=6, column=0, sticky="e", padx=5)
        self.total_value = ctk.CTkLabel(self, text="0.00 ‚ÇΩ")
        self.total_value.grid(row=6, column=1, sticky="w", padx=5)

    def _create_control_buttons(self) -> None:
        """–ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Ä—è–¥–æ–º."""
        btn_frame = ctk.CTkFrame(self)
        btn_frame.grid(row=7, column=0, columnspan=3, pady=10)

        ctk.CTkButton(
            btn_frame,
            text="–î–æ–±–∞–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É",
            command=self._add_work
        ).pack(side="left", padx=5)

        ctk.CTkButton(
            btn_frame,
            text="–£–¥–∞–ª–∏—Ç—å —Ä–∞–±–æ—Ç—É",
            command=self._remove_work
        ).pack(side="left", padx=5)

        ctk.CTkButton(
            btn_frame,
            text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Ä—è–¥",
            command=self._save_order
        ).pack(side="right", padx=5)

    def _open_date_picker(self) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π."""
        dialog = DatePickerDialog(self)
        date = dialog.get_date()
        if date:
            self.date_entry.delete(0, "end")
            self.date_entry.insert(0, date.strftime("%d.%m.%Y"))

    def _select_workers(self) -> None:
        """–í—ã–±–æ—Ä —Ä–∞–±–æ—á–∏—Ö —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å—á–µ—Ç—á–∏–∫–∞."""
        dialog = WorkerSelectionDialog(self, self.db)
        workers = dialog.get_selected_workers()
        if workers:
            self._current_workers = workers
            self.workers_btn.configure(text=f"–í—ã–±—Ä–∞–Ω–æ: {len(workers)} —Ä–∞–±–æ—á–∏—Ö")

    def _add_work(self) -> None:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∞ —Ä–∞–±–æ—Ç—ã —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ."""
        try:
            work_types = self.db.execute_query(
                "SELECT id, name, price FROM work_types"
            )
            if not work_types:
                show_error("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∏–¥–æ–≤ —Ä–∞–±–æ—Ç")
                return

            dialog = WorkTypeSelectionDialog(self, work_types)
            selected = dialog.get_selected_work()
            if selected:
                self._current_works.append({
                    "type_id": selected[0],
                    "name": selected[1],
                    "price": selected[2],
                    "quantity": selected[3]
                })
                self._update_works_table()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã: {str(e)}")
            show_error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤–∏–¥–∞ —Ä–∞–±–æ—Ç")

    def _update_works_table(self) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å –ø–µ—Ä–µ—Å—á–µ—Ç–æ–º —Å—É–º–º."""
        for row in self.works_table.get_children():
            self.works_table.delete(row)

        total = 0.0
        for work in self._current_works:
            amount = work["price"] * work["quantity"]
            self.works_table.insert("", "end", values=(
                work["name"],
                work["quantity"],
                f"{work['price']:.2f} ‚ÇΩ",
                f"{amount:.2f} ‚ÇΩ"
            ))
            total += amount

        self.total_value.configure(text=f"{total:.2f} ‚ÇΩ")

    def _remove_work(self) -> None:
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã."""
        selected = self.works_table.selection()
        if not selected:
            show_error("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—Ç—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return

        index = self.works_table.index(selected[0])
        del self._current_works[index]
        self._update_works_table()

    def _save_order(self) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Ä—è–¥–∞ —Å –ø–æ–ª–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π."""
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª–µ–π
            errors = self._validate_basic_fields()
            if errors:
                show_error("\n".join(errors))
                return

            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            product_id = self._get_selected_id("products")
            contract_id = self._get_selected_id("contracts")
            if not product_id or not contract_id:
                show_error("–ù–µ –≤—ã–±—Ä–∞–Ω–æ –∏–∑–¥–µ–ª–∏–µ –∏–ª–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç")
                return

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
            order_id = self._save_to_database(product_id, contract_id)
            self._save_related_data(order_id)

            show_info("–ù–∞—Ä—è–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
            self._clear_form()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Ä—è–¥–∞: {str(e)}")
            show_error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")

    def _validate_basic_fields(self) -> List[str]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã."""
        errors = []
        if not validate_date(self.date_entry.get()):
            errors.append("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã (–¥–¥.–º–º.–≥–≥–≥–≥)")
        if not self._current_workers:
            errors.append("–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏–º—É–º –æ–¥–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ")
        if not self._current_works:
            errors.append("–î–æ–±–∞–≤—å—Ç–µ –º–∏–Ω–∏–º—É–º –æ–¥–∏–Ω –≤–∏–¥ —Ä–∞–±–æ—Ç")
        return errors

    def _get_selected_id(self, field: str) -> Optional[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ –∫–æ–º–±–æ–±–æ–∫—Å–∞."""
        value = getattr(self, f"{field}_combobox").get()
        return int(value.split(" - ")[0]) if value else None

    def _save_to_database(self, product_id: int, contract_id: int) -> int:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –Ω–∞—Ä—è–¥–∞ –≤ –ë–î."""
        total = sum(work["price"] * work["quantity"] for work in self._current_works)

        result = self.db.execute_query(
            """INSERT INTO work_orders 
               (order_date, product_id, contract_id, total_amount)
               VALUES (?, ?, ?, ?)
               RETURNING id""",
            (self.date_entry.get(), product_id, contract_id, total)
        )

        if not result:
            raise ValueError("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Ä—è–¥–∞")
        return result[0][0]

    def _save_related_data(self, order_id: int) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (—Ä–∞–±–æ—Ç–Ω–∏–∫–∏ –∏ –≤–∏–¥—ã —Ä–∞–±–æ—Ç)."""
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—á–∏—Ö
        workers_data = [(order_id, worker_id) for worker_id in self._current_workers]
        self.db.execute_query(
            "INSERT INTO order_workers (order_id, worker_id) VALUES (?, ?)",
            workers_data,
            many=True
        )

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∏–¥–æ–≤ —Ä–∞–±–æ—Ç
        works_data = [
            (order_id, work["type_id"], work["quantity"], work["price"] * work["quantity"])
            for work in self._current_works
        ]
        self.db.execute_query(
            """INSERT INTO order_work_types 
               (order_id, work_type_id, quantity, amount)
               VALUES (?, ?, ?, ?)""",
            works_data,
            many=True
        )

    def _clear_form(self) -> None:
        """–û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è."""
        self.date_entry.delete(0, "end")
        self.date_entry.insert(0, datetime.now().strftime("%d.%m.%Y"))
        self.products_combobox.set("")
        self.contracts_combobox.set("")
        self._current_workers = []
        self._current_works = []
        self.workers_btn.configure(text="–í—ã–±—Ä–∞—Ç—å —Ä–∞–±–æ—á–∏—Ö (0)")
        self._update_works_table()


class WorkTypeSelectionDialog(ctk.CTkToplevel):
    """–î–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –≤–∏–¥–∞ —Ä–∞–±–æ—Ç —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —É–∫–∞–∑–∞–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞."""

    def __init__(self, parent: ctk.CTkFrame, work_types: List[Tuple]):
        super().__init__(parent)
        self.title("–í—ã–±–æ—Ä –≤–∏–¥–∞ —Ä–∞–±–æ—Ç")
        self.geometry("400x300")
        self._selected = None

        # –¢–∞–±–ª–∏—Ü–∞ –≤–∏–¥–æ–≤ —Ä–∞–±–æ—Ç
        self.tree = ttk.Treeview(
            self,
            columns=("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–¶–µ–Ω–∞"),
            show="headings"
        )
        self.tree.heading("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", text="–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ")
        self.tree.heading("–¶–µ–Ω–∞", text="–¶–µ–Ω–∞ –∑–∞ –µ–¥.")
        self.tree.pack(expand=True, fill="both", padx=10, pady=10)

        for wt in work_types:
            self.tree.insert("", "end", values=(wt[1], f"{wt[2]:.2f} ‚ÇΩ"), tags=(wt[0],))

        # –ü–æ–ª–µ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        self.quantity_entry = ctk.CTkEntry(self, placeholder_text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
        self.quantity_entry.pack(pady=5)

        # –ö–Ω–æ–ø–∫–∏
        btn_frame = ctk.CTkFrame(self)
        btn_frame.pack(pady=10)

        ctk.CTkButton(
            btn_frame,
            text="–í—ã–±—Ä–∞—Ç—å",
            command=self._on_select
        ).pack(side="left", padx=5)

        ctk.CTkButton(
            btn_frame,
            text="–û—Ç–º–µ–Ω–∞",
            command=self.destroy
        ).pack(side="right", padx=5)

    def _on_select(self) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∏–¥–∞ —Ä–∞–±–æ—Ç."""
        selected = self.tree.selection()
        if not selected:
            show_error("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Ä–∞–±–æ—Ç")
            return

        try:
            quantity = int(self.quantity_entry.get())
            if quantity <= 0:
                raise ValueError
        except ValueError:
            show_error("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
            return

        self._selected = (
            int(self.tree.item(selected[0], "tags")[0]),  # ID
            self.tree.item(selected[0], "values")[0],  # –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
            float(self.tree.item(selected[0], "values")[1].split()[0]),  # –¶–µ–Ω–∞
            quantity
        )
        self.destroy()

    def get_selected_work(self) -> Optional[Tuple]:
        return self._selected