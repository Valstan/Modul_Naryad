# gui/work_order_form.py
import logging
from datetime import datetime
from tkinter import ttk
from typing import List, Dict, Optional, Tuple

import customtkinter as ctk

from db.database import Database
from gui.dialogs import DatePickerDialog, WorkerSelectionDialog, show_error, show_info
from utils.validators import validate_date

logger = logging.getLogger(__name__)


class WorkOrderForm(ctk.CTkFrame):
    """–§–æ—Ä–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Ä—è–¥–æ–≤ —Ä–∞–±–æ—Ç —Å –ø–æ–ª–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π."""

    def __init__(self, parent: ctk.CTkFrame, db: Database) -> None:
        super().__init__(parent)
        self.db = db
        self._current_workers: List[int] = []
        self._current_works: List[Dict] = []
        self._setup_ui()
        self._load_initial_data()

    def _setup_ui(self) -> None:
        """–ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∫–æ–º–ø–æ–Ω–æ–≤–∫–æ–π."""
        self.grid_columnconfigure(1, weight=1)
        self.grid_rowconfigure(5, weight=1)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–æ—Ä–º—ã
        header = ctk.CTkLabel(self, text="–ù–æ–≤—ã–π –Ω–∞—Ä—è–¥ —Ä–∞–±–æ—Ç", font=("Arial", 14, "bold"))
        header.grid(row=0, column=0, columnspan=3, pady=(10, 20), sticky="ew")

        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
        self._create_input_fields()
        self._create_workers_section()
        self._create_works_table()
        self._create_total_section()
        self._create_control_buttons()

    def _create_input_fields(self) -> None:
        """–ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø–æ–ª—è –≤–≤–æ–¥–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π."""
        # –î–∞—Ç–∞ –Ω–∞—Ä—è–¥–∞
        date_frame = ctk.CTkFrame(self)
        date_frame.grid(row=1, column=0, columnspan=3, padx=5, pady=5, sticky="ew")
        date_frame.grid_columnconfigure(1, weight=1)

        ctk.CTkLabel(date_frame, text="–î–∞—Ç–∞:").pack(side="left", padx=(0, 5))
        self.date_entry = ctk.CTkEntry(date_frame)
        self.date_entry.insert(0, datetime.now().strftime("%d.%m.%Y"))
        self.date_entry.pack(side="left", fill="x", expand=True)

        ctk.CTkButton(
            date_frame,
            text="üìÖ",
            width=30,
            command=self._open_date_picker
        ).pack(side="right", padx=(5, 0))

        # –í—ã–±–æ—Ä –∏–∑–¥–µ–ª–∏—è –∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
        self._create_combobox("–ò–∑–¥–µ–ª–∏–µ:", "products", row=2)
        self._create_combobox("–ö–æ–Ω—Ç—Ä–∞–∫—Ç:", "contracts", row=3)

    def _create_combobox(self, label: str, table: str, row: int) -> None:
        """–£–ª—É—á—à–µ–Ω–Ω—ã–µ –≤—ã–ø–∞–¥–∞—é—â–∏–µ —Å–ø–∏—Å–∫–∏ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º."""
        frame = ctk.CTkFrame(self)
        frame.grid(row=row, column=0, columnspan=3, padx=5, pady=5, sticky="ew")
        frame.grid_columnconfigure(1, weight=1)

        ctk.CTkLabel(frame, text=f"{label}").pack(side="left", padx=(0, 5))
        combobox = ctk.CTkComboBox(frame, values=[])
        combobox.pack(side="left", fill="x", expand=True, padx=(0, 5))
        setattr(self, f"{table}_combobox", combobox)

        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        ctk.CTkButton(
            frame,
            text="üîÑ",
            width=30,
            command=lambda: self._refresh_combobox(table)
        ).pack(side="right")

    def _refresh_combobox(self, table: str) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞."""
        try:
            if table == "products":
                data = self.db.execute_query("SELECT id, name FROM products")
            elif table == "contracts":
                data = self.db.execute_query("SELECT id, contract_code FROM contracts")
            values = [f"{row[0]} - {row[1]}" for row in data] if data else []
            getattr(self, f"{table}_combobox").configure(values=values)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {table}: {str(e)}")
            show_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ {table}")

    def _create_workers_section(self) -> None:
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä —Ä–∞–±–æ—á–∏—Ö —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π."""
        self.worker_frame = ctk.CTkFrame(self)
        self.worker_frame.grid(row=4, column=0, columnspan=3, padx=5, pady=5, sticky="ew")

        self.workers_btn = ctk.CTkButton(
            self.worker_frame,
            text="–í—ã–±—Ä–∞—Ç—å —Ä–∞–±–æ—á–∏—Ö (0)",
            command=self._select_workers
        )
        self.workers_btn.pack(side="left", padx=5, pady=5, fill="x", expand=True)

        ctk.CTkLabel(
            self.worker_frame,
            text="* –ú–∏–Ω–∏–º—É–º 1 —Ä–∞–±–æ—á–∏–π",
            text_color="gray"
        ).pack(side="right", padx=5)

    def _create_works_table(self) -> None:
        """–ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Ä–∞–±–æ—Ç —Å –ø–æ–ª–æ—Å–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏."""
        table_frame = ctk.CTkFrame(self)
        table_frame.grid(row=5, column=0, columnspan=3, padx=5, pady=5, sticky="nsew")
        table_frame.grid_rowconfigure(0, weight=1)
        table_frame.grid_columnconfigure(0, weight=1)

        columns = ("–í–∏–¥ —Ä–∞–±–æ—Ç—ã", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–¶–µ–Ω–∞ –∑–∞ –µ–¥.", "–°—É–º–º–∞")
        self.works_table = ttk.Treeview(
            table_frame,
            columns=columns,
            show="headings",
            style="Custom.Treeview"
        )

        for col in columns:
            self.works_table.heading(col, text=col)
            self.works_table.column(col, width=120, anchor="center")

        scrollbar = ttk.Scrollbar(table_frame, orient="vertical", command=self.works_table.yview)
        self.works_table.configure(yscrollcommand=scrollbar.set)
        scrollbar.grid(row=0, column=1, sticky="ns")
        self.works_table.grid(row=0, column=0, sticky="nsew")

    def _create_total_section(self) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–π —Å—É–º–º—ã —Å –≤–∞–ª—é—Ç–æ–π."""
        total_frame = ctk.CTkFrame(self)
        total_frame.grid(row=6, column=0, columnspan=3, padx=5, pady=5, sticky="ew")
        total_frame.grid_columnconfigure(1, weight=1)

        ctk.CTkLabel(total_frame, text="–ò—Ç–æ–≥–æ:").pack(side="left", padx=(10, 5))
        self.total_value = ctk.CTkLabel(total_frame, text="0.00 ‚ÇΩ", font=("Arial", 12, "bold"))
        self.total_value.pack(side="left")

    def _create_control_buttons(self) -> None:
        """–ì—Ä—É–ø–ø–∞ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏."""
        btn_frame = ctk.CTkFrame(self)
        btn_frame.grid(row=7, column=0, columnspan=3, padx=5, pady=(10, 5), sticky="ew")
        btn_frame.grid_columnconfigure((0, 1, 2), weight=1)

        ctk.CTkButton(
            btn_frame,
            text="–î–æ–±–∞–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É",
            command=self._add_work
        ).grid(row=0, column=0, padx=5, pady=5, sticky="ew")

        ctk.CTkButton(
            btn_frame,
            text="–£–¥–∞–ª–∏—Ç—å —Ä–∞–±–æ—Ç—É",
            command=self._remove_work
        ).grid(row=0, column=1, padx=5, pady=5, sticky="ew")

        ctk.CTkButton(
            btn_frame,
            text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Ä—è–¥",
            command=self._save_order
        ).grid(row=0, column=2, padx=5, pady=5, sticky="ew")

    def _load_initial_data(self) -> None:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
        try:
            self._refresh_combobox("products")
            self._refresh_combobox("contracts")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            show_error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤")

    def _open_date_picker(self) -> None:
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä –¥–∞—Ç—ã —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π."""
        dialog = DatePickerDialog(self)
        self.wait_window(dialog)
        selected_date = dialog.get_date()
        if selected_date:
            formatted_date = selected_date.strftime("%d.%m.%Y")
            if validate_date(formatted_date):
                self.date_entry.delete(0, "end")
                self.date_entry.insert(0, formatted_date)
            else:
                show_error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã")

    def _select_workers(self) -> None:
        """–í—ã–±–æ—Ä —Ä–∞–±–æ—á–∏—Ö —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
        dialog = WorkerSelectionDialog(self, self.db)
        self.wait_window(dialog)
        workers = dialog.get_selected_workers()
        if workers:
            self._current_workers = workers
            self.workers_btn.configure(text=f"–í—ã–±—Ä–∞–Ω–æ: {len(workers)} —Ä–∞–±–æ—á–∏—Ö")

    def _add_work(self) -> None:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å –≤—ã–±–æ—Ä–æ–º –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö."""
        try:
            work_types = self.db.execute_query(
                "SELECT id, name, price, unit FROM work_types"
            )
            if not work_types:
                show_error("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∏–¥–æ–≤ —Ä–∞–±–æ—Ç")
                return

            dialog = WorkTypeSelectionDialog(self, work_types)
            self.wait_window(dialog)
            selected = dialog.get_selected_work()

            if selected:
                self._current_works.append({
                    "type_id": selected[0],
                    "name": selected[1],
                    "price": selected[2],
                    "quantity": selected[3],
                    "unit": selected[4]
                })
                self._update_works_table()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã: {str(e)}")
            show_error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã")

    def _update_works_table(self) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ä–∞–±–æ—Ç —Å –ø–µ—Ä–µ—Å—á–µ—Ç–æ–º —Å—É–º–º."""
        try:
            self.works_table.delete(*self.works_table.get_children())
            total = 0.0

            for work in self._current_works:
                amount = work["price"] * work["quantity"]
                total += amount
                self.works_table.insert("", "end", values=(
                    work["name"],
                    f"{work['quantity']} {work['unit']}",
                    f"{work['price']:.2f} ‚ÇΩ",
                    f"{amount:.2f} ‚ÇΩ"
                ))

            self.total_value.configure(text=f"{total:.2f} ‚ÇΩ")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {str(e)}")
            show_error("–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç")

    def _remove_work(self) -> None:
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º."""
        selected = self.works_table.selection()
        if not selected:
            show_error("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—Ç—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return

        confirm = show_info("–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É?", need_confirm=True)
        if confirm:
            index = self.works_table.index(selected[0])
            del self._current_works[index]
            self._update_works_table()

    def _save_order(self) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Ä—è–¥–∞ —Å –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π."""
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª–µ–π
            errors = []
            if not validate_date(self.date_entry.get()):
                errors.append("–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞")
            if not self._current_workers:
                errors.append("–ù–µ –≤—ã–±—Ä–∞–Ω—ã —Ä–∞–±–æ—á–∏–µ")
            if not self._current_works:
                errors.append("–ù–µ—Ç —Ä–∞–±–æ—Ç")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–∑–¥–µ–ª–∏—è –∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
            product_id = self._get_selected_id("products")
            contract_id = self._get_selected_id("contracts")
            if not product_id:
                errors.append("–ù–µ –≤—ã–±—Ä–∞–Ω–æ –∏–∑–¥–µ–ª–∏–µ")
            if not contract_id:
                errors.append("–ù–µ –≤—ã–±—Ä–∞–Ω –∫–æ–Ω—Ç—Ä–∞–∫—Ç")

            if errors:
                show_error(" ".join(errors))
                return

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
            order_id = self._save_to_database(product_id, contract_id)
            self._save_related_data(order_id)
            show_info("–ù–∞—Ä—è–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
            self._clear_form()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")
            show_error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Ä—è–¥")

    def _get_selected_id(self, field: str) -> Optional[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ ID –∏–∑ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞."""
        combobox = getattr(self, f"{field}_combobox")
        value = combobox.get()
        return int(value.split(" - ")[0]) if value else None

    def _save_to_database(self, product_id: int, contract_id: int) -> int:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø–∏—Å–∏ –Ω–∞—Ä—è–¥–∞."""
        total = sum(w["price"] * w["quantity"] for w in self._current_works)
        result = self.db.execute_query(
            """INSERT INTO work_orders 
               (order_date, product_id, contract_id, total_amount)
               VALUES (?, ?, ?, ?)
               RETURNING id""",
            (self.date_entry.get(), product_id, contract_id, total)
        )
        return result[0][0] if result else None

    def _save_related_data(self, order_id: int) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î."""
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—á–∏—Ö
        workers_data = [(order_id, worker_id) for worker_id in self._current_workers]
        self.db.execute_query(
            "INSERT INTO order_workers (order_id, worker_id) VALUES (?, ?)",
            workers_data,
            many=True
        )

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç
        works_data = [
            (order_id, w["type_id"], w["quantity"], w["price"] * w["quantity"])
            for w in self._current_works
        ]
        self.db.execute_query(
            """INSERT INTO order_work_types 
               (order_id, work_type_id, quantity, amount)
               VALUES (?, ?, ?, ?)""",
            works_data,
            many=True
        )

    def _clear_form(self) -> None:
        """–û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è."""
        self.date_entry.delete(0, "end")
        self.date_entry.insert(0, datetime.now().strftime("%d.%m.%Y"))
        self.products_combobox.set("")
        self.contracts_combobox.set("")
        self._current_workers = []
        self._current_works = []
        self.workers_btn.configure(text="–í—ã–±—Ä–∞—Ç—å —Ä–∞–±–æ—á–∏—Ö (0)")
        self._update_works_table()


class WorkTypeSelectionDialog(ctk.CTkToplevel):
    """–î–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –≤–∏–¥–∞ —Ä–∞–±–æ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è."""

    def __init__(self, parent: ctk.CTkFrame, work_types: List[Tuple]):
        super().__init__(parent)
        self.title("–í—ã–±–æ—Ä –≤–∏–¥–∞ —Ä–∞–±–æ—Ç")
        self.geometry("500x350")
        self._selected = None

        # –¢–∞–±–ª–∏—Ü–∞ –≤–∏–¥–æ–≤ —Ä–∞–±–æ—Ç
        self.tree = ttk.Treeview(
            self,
            columns=("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–ï–¥.–∏–∑–º.", "–¶–µ–Ω–∞"),
            show="headings"
        )
        self.tree.heading("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", text="–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ")
        self.tree.heading("–ï–¥.–∏–∑–º.", text="–ï–¥. –∏–∑–º.")
        self.tree.heading("–¶–µ–Ω–∞", text="–¶–µ–Ω–∞ –∑–∞ –µ–¥.")
        self.tree.pack(expand=True, fill="both", padx=10, pady=10)

        for wt in work_types:
            self.tree.insert("", "end", values=(
                wt[1],
                wt[3],
                f"{wt[2]:.2f} ‚ÇΩ"
            ), tags=(wt[0],))

        # –ü–æ–ª—è –≤–≤–æ–¥–∞
        self.quantity_frame = ctk.CTkFrame(self)
        self.quantity_frame.pack(padx=10, pady=5, fill="x")

        ctk.CTkLabel(self.quantity_frame, text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:").pack(side="left", padx=5)
        self.quantity_entry = ctk.CTkEntry(self.quantity_frame)
        self.quantity_entry.pack(side="left", fill="x", expand=True)

        # –ö–Ω–æ–ø–∫–∏
        btn_frame = ctk.CTkFrame(self)
        btn_frame.pack(padx=10, pady=10)

        ctk.CTkButton(
            btn_frame,
            text="–í—ã–±—Ä–∞—Ç—å",
            command=self._on_select
        ).pack(side="left", padx=5)

        ctk.CTkButton(
            btn_frame,
            text="–û—Ç–º–µ–Ω–∞",
            command=self.destroy
        ).pack(side="right", padx=5)

    def _on_select(self) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–±–æ—Ç—ã —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π."""
        selected = self.tree.selection()
        if not selected:
            show_error("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Ä–∞–±–æ—Ç")
            return

        try:
            quantity = int(self.quantity_entry.get())
            if quantity <= 0:
                raise ValueError
        except ValueError:
            show_error("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
            return

        item = self.tree.item(selected[0])
        work_id = int(item["tags"][0])
        work_data = (
            work_id,
            item["values"][0],
            float(item["values"][2].split()[0]),
            quantity,
            item["values"][1]
        )
        self._selected = work_data
        self.destroy()

    def get_selected_work(self) -> Optional[Tuple]:
        return self._selected